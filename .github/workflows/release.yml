name: Release
on:
  workflow_dispatch:
jobs:
  release:
    runs-on: ubuntu-latest
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Set up Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        run: flutter pub get

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          version=$(grep '^version:' pubspec.yaml | sed 's/version:[ ]*//;s/\r//')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Extract release notes from CHANGELOG.md
        id: get_notes
        run: |
          version="${{ steps.get_version.outputs.version }}"
          # Escape dots for grep
          version_escaped=$(echo "$version" | sed 's/\./\\./g')
          # Find the line number of the version header
          start=$(grep -n "^## \[$version_escaped\]" CHANGELOG.md | cut -d: -f1 | head -n1)
          if [ -z "$start" ]; then
            echo "No changelog section found for version $version"; exit 1
          fi
          # Find the next version header after start
          end=$(tail -n +$((start+1)) CHANGELOG.md | grep -n '^## ' | cut -d: -f1 | head -n1)
          if [ -z "$end" ]; then
            # To end of file
            end=$(wc -l < CHANGELOG.md)
          else
            end=$((start + end - 1))
          fi
          notes=$(sed -n "$start,$end p" CHANGELOG.md | tail -n +2)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Android APK
        run: flutter build apk --release

      - name: Create GitHub Release (Android APK)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            apkPath="build/app/outputs/flutter-apk/app-release.apk"
            version="${{ steps.get_version.outputs.version }}"
            notes="${{ steps.get_notes.outputs.notes }}"
            tag="v$version"
            apkName="Faunty-$version.apk"
            # Get latest commit SHA
            sha=$(git rev-parse HEAD)
            if [ -f "$apkPath" ]; then
            cp "$apkPath" "$apkName"
            gh release create "$tag" "$apkName" --title "Release $version" --notes "$notes" --target "$sha"
            else
            gh release create "$tag" --title "Release $version" --notes "$notes" --target "$sha"
            fi

      - name: Done
        run: echo "Release ${{ steps.get_version.outputs.version }} complete!"
